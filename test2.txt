@RequestMapping(value = "/test/{account_item}/{menu_cd}/view_popup.do", method = RequestMethod.GET)
public String new_view_popup(@RequestParam Map<String, Object> paramMap, Model model, HttpServletRequest request
        , @PathVariable(value = "account_item") String account_item, @PathVariable(value = "menu_cd") String menu_cd) {
    HttpSession session = request.getSession();
    UserAuthChecker userAuthChecker = new UserAuthChecker(session);
    User userInfo = (User) session.getAttribute("s_user");
    BudgetHandler budgetHandler = new BudgetHandler(menu_cd, account_item);
    if(userAuthChecker.isAuth("isOnlyDmIm")){
        return "redirect:/common/redirectAlert_popup.do";
    }

    String bgt_no = (String) paramMap.get("bgt_no");

    String bsnss_year = budgetService.decideBsnssYear(paramMap, menu_cd);

    int bgtListSeq = 0;

    CmMap<String, Object> loginMap = budgetService.determineLoginMap(session);

    UserPrivDto userPrivDto = (UserPrivDto) session.getAttribute("s_userPrivInfo");
    String now = CmFunction.getTodayString("yyyyMMdd");

    CmMap<String, Object> accountItemMap = budgetService.initializeAccountItemMap(account_item, menu_cd, bsnss_year, bgt_no);

    String status = null/*, newStatus = null*/;
    CmMap<String, Object> stepMap = null; // 진행현황 관련 정보 맵
    boolean isTransfer = false
        , isTransferSaveLimit = false
        , isAdmin = false
        , enpRegPossble = false // 집행계획금액 등록 가능 상태
        , atnriNextCheck = false
        , brdNextCheck = false;

    try {
        budgetHandler.adjustAccountP();

        CmMap<String, Object> bgtInfo = budgetService.tempGetBgtInfo(bgt_no, bsnss_year, account_item, bsnss_year, budgetHandler, userAuthChecker);

        if(budgetHandler.isOperationAndAccountA()) {
            CmMap<String, Object> amtMap = budgetService.getOperationAAmtMap(bgt_no, bgtInfo, loginMap, session, bsnss_year);
            model.addAttribute("amtMap", amtMap);
        }

        if (bgt_no != null) {
            bgtListSeq = budgetService.getBgtListSeq(bgt_no, bsnss_year);
            status = statusUpdateService.getStatus(bgt_no, bsnss_year);

            StepEnum stepEnum = StepEnum.valueOf(CmFunction.makeStepStatus(account_item, status));
            stepMap = stepEnum.getMap();

            if(budgetHandler.isAccountA()){
                CmMap<String, Object> accountAMoreInfo = budgetService.getMoreInfoAccountA(bgtInfo, bgt_no, bgtListSeq, bsnss_year, budgetHandler, stepMap, userAuthChecker);

                model.addAttribute("planAllocInfo", accountAMoreInfo.get("planAllocInfo"));  // 신규투자 항목 예산정보
                model.addAttribute("planReqInfo", accountAMoreInfo.get("planReqInfo")); // 신규투자 요청정보
                model.addAttribute("reqStatusMap", accountAMoreInfo.get("reqStatusMap")); // ??
                model.addAttribute("astNoArr", accountAMoreInfo.get("astNoArr")); // 자산번호 배열
                model.addAttribute("astNoArrTxt", accountAMoreInfo.get("astNoArrTxt"));
                model.addAttribute("astAuth", accountAMoreInfo.get("astAuth")); // 자산번호 수정가능 권한
            }


            stepMap.put("reqIsDrop", false);
            if(bgtInfo.get("is_stop").toString().equals("true")) {
                stepMap.put("statusNm", "운영중지");
            }

            if (userAuthChecker.isBoOrBmOrAdmin()) {
                stepMap.put("regType", "reg");
                stepMap.put("adminCheck", true);
                logger.debug(":::: 예산운영자, 예산관리자는 모든 status 에서 등록 가능");

                isAdmin = true;
            } else {
                stepMap.put("adminCheck", false);
            }

            if (this.tempStepAuthCheck(userInfo, userAuthChecker, bgtListSeq, (String) stepMap.get("auth"))) {
                stepMap.put("stepEnumCheck", true);
            } else {
                stepMap.put("stepEnumCheck", false);
            }

            Set<String> FINAL_CHECK_STATES = new HashSet<>(Arrays.asList("a_aad", "fs_aav", "i_aav")); //최종항목점검 중
            if (this.tempStepAuthCheck(userInfo, userAuthChecker, bgtListSeq, "isPm")
                && "view".equals(stepMap.getString("regType"))
                && !FINAL_CHECK_STATES.contains(stepMap.getString("enumNm"))) {
                stepMap.put("isTempAuth", true);
            } else {
                stepMap.put("isTempAuth", userAuthChecker.isUserPrivDtoPresent() ? userAuthChecker.isBm() : userAuthChecker.isAdmin());
            }

            isTransfer = budgetItemService.getBgtIsTranfer(bgt_no);
            model.addAttribute("isTransfer", isTransfer);

            if("p".equals(menu_cd) && !isAdmin) {
                isTransferSaveLimit = isTransfer;
            }
            model.addAttribute("isTransferSaveLimit", isTransferSaveLimit);

            CmMap<String, Object> authMap = this.authCheck(bgtListSeq, request);

            if (Boolean.parseBoolean(authMap.getString("cntrcRegAuth"))) {
                authMap.put("cntrcAddPossible", budgetService.isCntrcAddPossible(stepEnum, account_item, budgetHandler));
            }

            if (budgetHandler.isOperationAndAccountA()) { 
                enpRegPossble = stepEnum.valueOf(stepEnum.name()).isAfterThan("a_brd");
                atnriNextCheck = stepEnum.valueOf(stepEnum.name()).isAfterThan("a_aav");
                brdNextCheck = stepEnum.valueOf(stepEnum.name()).isAfterThan("a_brd");
            } else if (budgetHandler.isOperationAndAccountFOrS()) { 
                enpRegPossble = stepEnum.valueOf(stepEnum.name()).isEqualOrAfterThan("fs_brd");
            } else if (budgetHandler.isPlanAndAccountA()) { 
                enpRegPossble = stepEnum.valueOf(stepEnum.name()).isBeforeThan("a_ppd");
            } else if (budgetHandler.isPlanAndAccountFOrS()) {
                enpRegPossble = true;
            }


            String cntrcType = String.valueOf(bgtInfo.get("bgt_cntrc_type"));
            if ("품의작성".equals(stepMap.get("buttonNm")) && !cntrcType.equals("d")) { 
                boolean isApprovalManager = budgetService.getBgtApproValManagerCheck(bgt_no, (String) session.getAttribute("s_memId"));
                stepMap.put("isApprovalManager", isApprovalManager);

                boolean isApprovalCreated = budgetService.getBgtApprovalCreatedCheck(bgt_no);

                boolean hasApprovalRequiredValues = !isApprovalCreated && budgetService.checkApprovalRequiredValues(bgtInfo, account_item); 
                model.addAttribute("hasApprovalRequiredValues", hasApprovalRequiredValues);

                if (hasApprovalRequiredValues) {
                    boolean isApprovalPeriod = budgetService.checkIsApprovalPeriod(bgtInfo, now);
                    if (isApprovalPeriod) {
                        model.addAttribute("isApprovalBtnExpose", true);
                        if (isApprovalManager || userAuthChecker.isBmOrAdmin()) {
                            ApprovalAmtDTO approvalAmtDTO = budgetService.prepareAndUpdateApprovalAmtInfo(bgtInfo, bsnss_year, bgt_no, account_item);
                            model.addAttribute("approvalUrl", approvalAmtDTO.getApprovalType().equals("100") ? APPROVAL_INV_URL + bgt_no : APPROVAL_URL + bgt_no);
                        }

                    } else {
                        model.addAttribute("isApprovalBtnExpose", false);
                    }
                } else {
                    model.addAttribute("isApprovalBtnExpose", false);
                }
            }

            model.addAttribute("stepEnum", stepMap);
            model.addAttribute("stepEnumName", stepEnum.name());
            model.addAttribute("status", status);
            model.addAttribute("authMap", authMap);

            if (status.equals("afd") || enpRegPossble) { 
                CmMap<String, Object> enfrcMap = budgetService.enfrcMap(bgt_no, bgtListSeq, session, bsnss_year);
                model.addAttribute("enfrcMap", enfrcMap);
                if(budgetHandler.isAccountI()) { 
                    model.addAttribute("isCmpEmpno", budgetService.isCmpEmpno(bgtListSeq, (String) session.getAttribute("s_memId"))); 
                    model.addAttribute("newItoClosedStatus", budgetService.getBgtNewItoMonthClosedStatus(bgtListSeq, now.substring(0,6)));
                }
            }

            if(budgetHandler.isAccountI()) {
                model.addAttribute("arcRrcDisabled", budgetService.arcRrcDisabled(bgt_no, bgtListSeq, bsnss_year));
                model.addAttribute("newItoFileMemoExistYmList", budgetService.getNewItoFileMemoExistYmList(bgtListSeq, "newito_month"));
                model.addAttribute("distribution_type", CmFunction.ITO_AREA_AMS.containsKey(bgt_no) ? "view" : "");
            }

            model.addAttribute("tagList", commonService.getTagList("bgt_list_data", bgtListSeq));
            model.addAttribute("changePrchsWay", budgetService.changePrchsWay(bgt_no));
        }

        List<CmMap<String, Object>> InvPrpsList = commonService.getCodeInfoInvList(bsnss_year);

        if(budgetHandler.isPlan()) { // 계획
            model.addAttribute("plan_schedule", planService.planSchedule(bsnss_year, null));//예산운영일정
            InvPrpsList.removeIf(item -> "migration".equals(item.getString("sub_nm")));
        }
        model.addAttribute("InvPrpsList", InvPrpsList);
        model.addAttribute("chargebackVo", budgetService.getBgtCbInfo((List<String>) bgtInfo.get("monthly"), bgtListSeq, 0, account_item, status, (List<String>) bgtInfo.get("itsm_list")));
        model.addAttribute("cntrcApprovalVo", budgetService.getBgtCntrcInfo(bgtListSeq));
        model.addAttribute("prchsWayList", commonService.getCodeInfoList("prchs_way"));
        model.addAttribute("BgtCntrcTypeList", commonService.getCodeInfoList("bgt_cntrc_type"));
        model.addAttribute("isBm", userAuthChecker.isBm());
        model.addAttribute("isBo", userAuthChecker.isBo());
        model.addAttribute("isPm", userAuthChecker.isPm());
        model.addAttribute("isTm", userAuthChecker.isTm());
        model.addAttribute("isAdmin", session.getAttribute("s_isAdmin"));
        model.addAttribute("bgtVo", bgtInfo);

    } catch (Exception e) {
        logger.error("exception", e);
    }

    model.addAttribute("classNm", BgtEnum.valueOf(account_item).getTitle());
    model.addAttribute("accountItem", accountItemMap);
    model.addAttribute("LoginMap", loginMap);
    model.addAttribute("bgtListSeq", bgtListSeq);
    model.addAttribute("bgtNo", bgt_no);
    model.addAttribute("status", status);
    model.addAttribute("priv", session.getAttribute("s_userPrivInfo"));
    model.addAttribute("isMigration", bgt_no == null ? false : budgetService.isMigration(bgt_no, bsnss_year));
    model.addAttribute("btnNowBy", (bgt_no == null || bsnss_year.equals(commonService.getBudgetYear())) ? null : budgetItemService.getNowBsnssYear(bgt_no, commonService.getBudgetYear()));
    model.addAttribute("btnBeforeBy", bgt_no == null ? null : budgetItemService.getBeforeBsnssYear(bgt_no, bsnss_year));

    Map<String, Object> currentStepMap = budgetService.getCurrentStepMap(userAuthChecker, account_item, status, stepMap);

    if(paramMap.get("reportId") != null && !"".equals(paramMap.get("reportId"))) {
        model.addAttribute("reportId", (String) paramMap.get("reportId"));
    }


    boolean approvalFlag = false;
    if(status != null){
        if(status.equals("aad") || status.equals("bpcn")){
            approvalFlag = budgetService.checkApprovalFlag(bgt_no);
        }
    }


    model.addAttribute("isView", currentStepMap);
    model.addAttribute("account_item", account_item);
    model.addAttribute("enpRegPossble" ,enpRegPossble);
    model.addAttribute("atnriNextCheck" , atnriNextCheck);
    model.addAttribute("brdNextCheck" , brdNextCheck);
    model.addAttribute("menuCd" , menu_cd);
    model.addAttribute("approvalFlag" , approvalFlag);

    return "/budget/item_view";
}
