public enum StepEnum implements EnumMapperType {
    /*afd 상태값은 기간에 따라 다르다.
    최종사용확정 완료(statusNm) == 집행계획등록 기간 전
    집행계획등록 중(statusNm) == 집행등록기간
    집행계획등록 완료(statusNm) == 집행완료*/

    /*신규투자를 제외하고, 계획 상태값은 "p"+운영상태값으로 생성한다.
    다른 조건으로 생성 시 bgt_plan_data_update 배치 쿼리 수정 필요.*/

    // stepEnum 추가할 때 순서에 맞게 seq 생성 필수! (같은 레벨이면 seq 겹쳐도 됨)

    //신규투자
    /*계획*/
    a_pct("이월대상", "isPm", "", "reg", "PM확정", null, "del", 1),
    a_pri("등록 중", "isPm", "a_ppd", "reg", "PM확정", null, "del", 2),
    a_ppd("PM확정", "isTm", "", "view", null, null, null, 3),
    a_ptcl("계획확정", "isBm", "", "view", null, null, null, 4),
    a_ppcl("(잠정)예산등록 중", "", "", "view", null, null, null, 5), // 운영에서 이월해야 품의작성으로 넘어갈 수 있음.
    a_dpri("잠정예산등록/팀장승인", "", "", "view", null,null, null, 6),
    a_ddwi("확정 대기 중", "", "", "view", null, null, null, 7),
    a_dd("잠정예산 마감", "", "", "view", null, null, null, 8),

    /*운영*/
    a_bct("이월대상", "isPm", "", "reg", "승인요청", null, "del", 1),
    a_bri("등록 중", "isPm", "a_brd", "reg", "승인요청", "isTm", "del", 2),
    a_brd("등록 승인 중", "isTm", "a_btcl", "view", "팀장승인", "isBo", "refer", 3),
    a_btcl("예산운영자 승인 중", "isBo", "a_bpcn", "reg", "승인", "isPm,품의담당자", null, 4),

    a_bpcn("품의작성 중", "isPm", "a_aav", "view", "품의작성", "isBo", null, 5),
    a_aav("자산번호 등록 중", "isBo", "a_atnri", "reg", "등록", "isPm", null, 6),
    a_atnri("사용확정 중", "isBm", "a_aad", "reg", "사용확정","isPm", null, 7),
    a_aad("최종항목점검 중", "isPm", "a_afi", "view", "최종항목점검",null, null, 8),
    a_afi("최종사용확정 중", "isBm", "a_afd", "reg", "최종사용확정",null, null, 9),
    a_afd("최종사용확정 완료", "isPm", "a_enreg", "view", null,null, null, 10),
    a_enreg("집행계획등록 중", "isPm", "a_encfm", "view", null,null, null, 11),
    a_encfm("집행계획등록 확정", "isPm", "a_encls", "view", null,null, null, 12),
    a_encls("집행계획등록 마감", "isBm", "a_end", "view", null,null, null, 13),
    a_end("종료", "isPm", "", "view", null,null, null, 14),
    a_drop("DROP", "isBm", "", "view", null,null, null, 15),

    //지급수수료, 보안용역수수료
    /*계획*/
    fs_pbst("운영중지", "isBm", "fs_pbct", "reg", null, null, null, 1),
    fs_pbct("이월대상", "isPm", "", "reg", "PM확정", null, "del", 2),
    fs_pbri("등록 중", "isPm", "fs_pbrd", "reg", "PM확정", null, "del", 3),
    fs_pbrd("PM확정", "isTm", "", "view", null,null, null, 4),
    fs_pbtcl("계획확정", "isBm", "", "view", null,null, null, 5),
    fs_pbpcl("(잠정)예산등록 중", "", "", "view", null,null, null, 6),
    fs_dpri("(잠정)예산등록 중", "", "", "view", null,null, null, 7),
    fs_dadi("조정예산등록/팀장승인", "", "", "view", null, null, null, 8),
    fs_ddwi("확정 대기 중", "", "", "view", null, null, null, 9),
    fs_dd("확정", "", "", "view", null, null, null, 10),

    /*운영*/
    fs_bst("운영중지", "isBm", "fs_bct", "reg", null, null, null, 1),
    fs_bct("이월대상", "isPm", "fs_bri", "reg", "승인요청", null, "del", 2),
    fs_bri("등록 중", "isPm", "fs_brd", "reg", "승인요청", "isTm", "del", 3),
    fs_brd("등록 승인 중", "isTm", "fs_btcl", "view", "팀장승인","isBm", "refer", 4),
    fs_btcl("예산관리자 마감 중", "isBm", "fs_bpcl", "reg", "마감", null, null, 5),
    fs_bpcl("사용신청 중", "isPm", "fs_aap", "reg", "사용신청","isTm", null, 6),

    fs_aap("사용 승인 중", "isTm", "fs_atcn", "view", "팀장승인","isBm", null, 7),
    fs_atcn("사용확정 중", "isBm", "fs_aad", "reg", "사용확정","isPm,품의담당자", null, 8),
    fs_aad("품의작성 중", "isPm", "fs_aav", "view", "품의작성","isPm", null, 9),
    fs_aav("최종항목점검 중", "isPm", "fs_afi", "view", "최종항목점검",null, null, 10),
    fs_afi("최종사용확정 중", "isBm", "fs_afd", "reg", "최종사용확정",null, null, 11),
    fs_afd("최종사용확정 완료", "isPm", "fs_enreg", "view", null,null, null, 12),
    fs_enreg("집행계획등록 중", "isPm", "fs_encfm", "view", null,null, null, 13),
    fs_encfm("집행계획등록 확정", "isPm", "fs_encls", "view", null,null, null, 14),
    fs_encls("집행계획등록 마감", "isBm", "", "view", null,null, null, 15),

    //New ITO
    /*계획*/
    i_pbst("운영중지", "isBm", "i_pbct", "reg", null, null, null, 1),
    i_pbct("이월대상", "isPm", "", "reg", "PM확정", null, "del", 2),
    i_pbri("등록 중", "isPm", "i_pbrd", "reg", "PM확정", null, "del", 3),
    i_pbrd("PM확정", "isTm", "", "view", null,null, null, 4),
    i_pbtcl("계획확정", "isBm", "", "view", null,null, null, 5),
    i_pbpcl("(잠정)예산등록 중", "", "", "view", null,null, null, 6),
    i_dpri("(잠정)예산등록 중", "", "", "view", null,null, null, 7),
    i_dadi("조정예산등록/팀장승인", "", "", "view", null, null, null, 8),
    i_ddwi("확정 대기 중", "", "", "view", null, null, null, 9),
    i_dd("확정", "", "", "view", null, null, null, 10),

    /*운영*/
    i_bst("운영중지", "isBm", "i_bct", "reg", null, null, null, 1),
    i_bct("이월대상", "isPm", "", "reg", "승인요청", null, "del", 1),
    i_bri("등록 중", "isPm", "i_brd", "reg", "승인요청", "isTm", "del", 2),
    i_brd("등록 승인 중", "isTm", "i_btcl", "view", "팀장승인","isBm", "refer", 3),
    i_btcl("예산관리자 마감 중", "isBm", "i_bpcl", "reg", "마감",null, null, 4),
    i_bpcl("사용신청 중", "isPm", "i_aap", "reg", "사용신청","isTm", null, 5),

    i_aap("사용 승인 중", "isTm", "i_atcn", "view", "팀장승인","isBm", null, 6),
    i_atcn("사용확정 중", "isBm", "i_aad", "reg", "사용확정","isPm,품의담당자", null, 7),
    i_aad("품의작성 중", "isPm", "i_aav", "view", "품의작성","isPm", null, 8),
    i_aav("최종항목점검 중", "isPm", "i_afi", "view", "최종항목점검",null, null, 9),
    i_afi("최종사용확정 중", "isBm", "i_afd", "reg", "최종사용확정",null, null, 10),
    i_afd("최종사용확정 완료", "isPm", "i_exreg", "view", null,null, null, 11),
    i_exreg("추가비용등록 중", "isCm", "i_exapv", "view", null,null, null, 12),
    i_exapv("추가비용승인 중", "isPm", "i_cbcal", "view", null,null, null, 13),
    i_cbreg("C/B 배부기준 값 등록 중", "", "", "view", null,null, null, 14),
    i_cbcal("C/B 계산중", "isCm", "i_cbapv", "view", null,null, null, 15),
    i_cbapv("예산관리자 승인 중", "isBm", "i_enreg", "view", null,null, null, 16),
    i_enreg("집행계획등록 중", "isBm", "i_encfm", "view", null,null, null, 17),
    i_encfm("집행계획등록 확정", "isPm", "i_encls", "view", null,null, null, 18),
    i_encls("집행계획등록 마감", "isBm", "", "view", null,null, null, 19),
    ;

    private final String statusNm; //팝업 우측 상단에 보여질 상태명
    private final String auth; //닫기 버튼 외 버튼을 클릭할 수 있는 권한
    private final String nextStep; //다음 step(stauts)
    private final String regType; //reg: 수정 가능 view : 등록 불가능. input전체 readonly
    private final String buttonNm; //다음 단계로 갈 수 있는 버튼 명
    private final String mailTo; //다음 단계 진입 시 메일이 수신될 권한목록. 쉼표로 구분. (공백XXXX)
    private final int seq; // 특정 상태 이후에 따른 처리를 위한 status 순서

    //refer(반려), del(삭제)
    //추가되면 updateStatus에서도 꼭 수정해야 한다!
    private final String referType;


    //전 단계 찾기
    private static Map<String, StepEnum> nextSteps =
        Collections.unmodifiableMap(Stream.of(values())
            .collect(Collectors.toMap(StepEnum::getNextStep, Function.identity(), (oldValue, newValue) -> oldValue)));

    public static StepEnum getPrevStep(String nextStep) {
        return Optional.ofNullable(nextSteps.get(nextStep)).orElse(null);
    }

    StepEnum(String statusNm, String auth, String nextStep, String regType, String buttonNm, String mailTo, String referType, int seq) {
        this.statusNm = statusNm;
        this.auth = auth;
        this.nextStep = nextStep;
        this.regType = regType;
        this.buttonNm = buttonNm;
        this.mailTo = mailTo;
        this.referType = referType;
        this.seq = seq;
    }

    public CmMap<String, Object> getMap() {
        CmMap<String, Object> cmMap = new CmMap<>();
        cmMap.put("enumNm", name());
        cmMap.put("statusNm", statusNm);
        cmMap.put("auth", auth);
        cmMap.put("nextStep", nextStep);
        cmMap.put("regType", regType);
        cmMap.put("buttonNm", buttonNm);
        cmMap.put("mailTo", mailTo);
        cmMap.put("referType", referType);
        cmMap.put("seq", seq);
        return cmMap;
    }

    public String getAuth() {
        return auth;
    }
    public String getNextStep() {
        return nextStep;
    }

    @Override
    public String getCode() {
        return name();
    }

    @Override
    public String getTitle() {
        return statusNm;
    }

    @Override
    public String getTitle2() {
        return null;
    }

    @Override
    public String getTitle3() {
        return null;
    }

    public int getSeq() {
        return seq;
    }

    // 비교할 상태와 같거나 이후 단계인지
    public boolean isEqualOrNext(String stemEnumName) {
        StepEnum otherStepEnum = StepEnum.valueOf(stemEnumName);
        int otherSeq = otherStepEnum.getSeq(); // 비교할 StepSeqEnum 의 Seq
        int nowSeq = seq; // 현재 StepSeqNum 의 seq

        if(nowSeq < otherSeq) {
            return false;
        } else {
            return true;
        }
    }

    // 비교할 상태 이후 단계인지 (같지 않음)
    public boolean isNext(String stemEnumName) {
        StepEnum otherStepEnum = StepEnum.valueOf(stemEnumName);
        int otherSeq = otherStepEnum.getSeq(); // 비교할 StepSeqEnum 의 Seq
        int nowSeq = seq; // 현재 StepSeqNum 의 seq

        if(nowSeq > otherSeq) {
            return true;
        } else {
            return false;
        }
    }

    // 비교할 상태 이전 단계인지 (같지 않음)
    public boolean isBefore(String stemEnumName) {
        StepEnum otherStepEnum = StepEnum.valueOf(stemEnumName);
        int otherSeq = otherStepEnum.getSeq(); // 비교할 StepSeqEnum 의 Seq
        int nowSeq = seq; // 현재 StepSeqNum 의 seq

        if(nowSeq < otherSeq) {
            return true;
        } else {
            return false;
        }
    }
}


    protected boolean stepAuthCheck(String account_item, String menu_cd, int bgt_list_seq, String auth, HttpServletRequest request) {
        boolean result = false;
        HttpSession session = request.getSession();
        if((boolean) session.getAttribute("s_isAdmin")){ //관리자는 모든 버튼 허용
            logger.debug(":::: stepAuthCheck 관리자 권한 허용");
            return true;
        }
        CmMap<String, Object> cmMap = new CmMap<>();
        cmMap.put("bgtListSeq", bgt_list_seq);
        UserPrivDto dto = (UserPrivDto) session.getAttribute("s_userPrivInfo");
        switch (auth) {
             case "isPm": //PM은 담당자인지 체크
                if (dto.getIsPm()) {
                    cmMap.put("memId", session.getAttribute("s_memId"));
                    if(cmMap.get("memId") != null){
                        if(bgtMngService.getBgtMngAuthCheck(cmMap)){
                            result = true;
                        }
                    }
                }
                break;
            case "isTm": //TM은 해당 팀에 속해있고 TM 권한이 있는지 체크
                if (dto.getIsTm()) {
                    cmMap.put("teamCd", session.getAttribute("s_userTeam"));
                    if(cmMap.get("teamCd") != null){
                        if(bgtMngService.getBgtMngAuthCheck(cmMap)){
                            result = true;
                        }
                    }
                }
                break;
            case "isBo": //예산운영자 체크
                result = dto.getIsBo();
                break;
            case "isBm": //예산관리자 체크
                result = dto.getIsBm();
                break;
        }
        if(!result) {
            logger.debug(":::: stepAuthCheck 권한 false");
            logger.debug(":::: emp_no " + session.getAttribute("s_memId") + " / bgt_list_seq " + bgt_list_seq);
        } else {
            logger.debug(":::: stepAuthCheck 권한 true");
        }
        return result;
    }
public class CmFunction {
    public static String makeStepStatus(String account_item, String status) {
        return account_item.equals("f") || account_item.equals("s") ? "fs_" + status : account_item + "_" + status;
    }
}
