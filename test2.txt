여러분은 FAANG 회사의 선임 엔지니어인 척할 것입니다.
성능과 유지보수성에 주의를 기울여 다음 코드를 검토하세요.
선임 엔지니어라면 해당 코드에 대해 생성할 수 있는 출력을 제공하세요.
               String cntrcType = String.valueOf(bgtInfo.get("bgt_cntrc_type"));
                if ("품의작성".equals(stepMap.get("buttonNm")) && !cntrcType.equals("d")) { // 세부(계약형태)건의 경우 제외
                    // 품의담당자인지 체크
                    boolean isApprovalManager = budgetService.getBgtApproValManagerCheck(bgt_no, (String) session.getAttribute("s_memId"));
                    stepMap.put("isApprovalManager", isApprovalManager);

                    // 현재 품의 작성 가능 여부 체크1 - 작성 된 품의가 없을 경우 품의작성 버튼 노출(isApprovalCreated false일 경우만 노출)
                    boolean isApprovalCreated = budgetService.getBgtApprovalCreatedCheck(bgt_no);

                    // 현재 품의 작성 가능 여부 체크2 - 품의작성 단계 이며, 기존에 작성 된 품의가 없을 경우 -> 품의작성 시 필요한 필수값들 다 있는지 체크. 한개라도 없을 경우 이하 로직 타지 않음, 품의작성 버튼 노출x, 알람 띄우기
                    boolean hasApprovalRequiredValues = true;
                    if (!isApprovalCreated) {
                        //품의작성 필수값체크
                        hasApprovalRequiredValues = budgetService.checkRequiredValues(bgtInfo, account_item);
                    }
                    model.addAttribute("hasApprovalRequiredValues", hasApprovalRequiredValues);

                    if (hasApprovalRequiredValues) {
                        // 현재 품의 작성 가능 여부 체크3 - 계약시작일/투자시작일(신규투자) 월 -1개월부터 노출 되어야 함(isApprovalPeriod true일 경우만 노출)
                        boolean isApprovalPeriod = false;
                        SimpleDateFormat dateFormat = new SimpleDateFormat ("yyyy-MM-dd");
                        Date cntrcStartDt = (Date) bgtInfo.get("cntrc_start_dt");
                        Date invStartDt = (Date) bgtInfo.get("inv_start_dt");
                        Date startDate = null;

                        if (cntrcStartDt != null) {
                            startDate = dateFormat.parse(CmFunction.getDateToString(cntrcStartDt, "yyyy-MM-dd"));
                        } else if (invStartDt != null) {
                            startDate = dateFormat.parse(CmFunction.getDateToString(invStartDt, "yyyy-MM-dd"));
                        }
                        String startDt = CmFunction.getDateToString(startDate, "");

                        int nowMonth = Integer.parseInt(now.substring(4,6));
                        int nowYear = Integer.parseInt(now.substring(0,4));
                        int compareMonth = 0;
                        int compareYear = nowYear;
                        if (nowMonth == 12) {
                            compareYear = compareYear +1;
                            compareMonth = 1;
                        } else {
                            compareMonth = nowMonth +1;
                        }

                        String compareDate = compareYear + (compareMonth<10?"0"+compareMonth:String.valueOf(compareMonth)) + now.substring(6); // 현재 +1달
                        if (Integer.parseInt(startDt) <= Integer.parseInt(compareDate)) { // 현재 +1달(compareDate) 보다 시작일(startDt)이 같거나 작아야 함
                            isApprovalPeriod = true;
                        }

                        if (!isApprovalCreated && isApprovalPeriod) {
                            model.addAttribute("isApprovalBtnExpose", true);

                            Map<String, Object> byInfo = settingService.getByInfoDetail(bsnss_year);
                            int first_year = Integer.parseInt(String.valueOf(byInfo.get("start_dt")).substring(0,4));
                            int last_year = Integer.parseInt(String.valueOf(byInfo.get("end_dt")).substring(0,4));
                            List<String> ymList = CmFunction.getDateGapMonthly(String.valueOf(byInfo.get("start_dt")), String.valueOf(byInfo.get("end_dt")), "yyyy-MM", "yyyyMM");
                            List<Integer> yearList = new ArrayList<>();
                            for (int c=first_year; c<=last_year; c++) {
                                yearList.add(c);
                            }

                            // 품의작성 버튼 노출 가능 하고 필수값이 모두 있을 경우, 담당자 혹은 어드민/예산관리자 권한 일때만 amt에 정보 새로 insert or update 한다.
                            if (isApprovalManager || (boolean) session.getAttribute("s_isAdmin") || (userPrivDto == null ? false : userPrivDto.getIsBm())) {
                                // 계약금액 리체크(총 금액이 아닌, 품의작성이 안된 금액만 가져와야 함 - status 0 / getBgtCntrcDataList)
                                long cntrcAmt = 0; // 총 계약금액(신규투자의 경우 총 투자금액 / 지급수수료는 BY상관없이 계약/정보 탭 에서 진행 안된 품의의 계약금액 합산)
                                long cntrcByAmtTotal = 0; // 전체 계약 금액 중 by에 해당 하는 계약금액의 합계 금액 - 품의가 여러건 일 경우 합산을 위함 23.03.15
                                CmMap<String, Object> cntrcMap = new CmMap<String, Object>();
                                cntrcMap.put("bgtListSeq", Integer.parseInt(bgtInfo.get("bgt_list_seq").toString()));
                                cntrcMap.put("bgtNo", bgtInfo.get("bgtNo").toString());
                                cntrcMap.put("bsnssYear", bgtInfo.get("bsnss_year").toString());
                                List<CmMap<String, Object>> BgtCntrcDataList = planService.getBgtCntrcDataList(cntrcMap);
                                for (CmMap<String, Object> i : BgtCntrcDataList) {
                                    String approvalStatus = String.valueOf(i.get("status"));
                                    if (approvalStatus.equals("0")) {
                                        long amt = Long.parseLong(String.valueOf(i.get("total_cntrc_amt")));
                                        boolean is_plan = (boolean) i.get("is_plan");
                                        if(!is_plan){
                                            cntrcAmt = cntrcAmt + amt;
                                        }

                                        // 집행할 금액(품의진행 할 금액) ? 전체 계약 금액 중 by에 해당 하는 계약금액의 합계 금액 가져옴
                                        int cntrcSeq = (int) i.get("cntrc_seq");
                                        long cntrcByAmt = budgetService.getcntrcByTotalAmt(cntrcSeq, ymList, yearList);
                                        cntrcByAmtTotal = cntrcByAmtTotal + cntrcByAmt;
                                    }
                                }

                                LinkedHashMap<String, Object> monthlyEnfrc = (LinkedHashMap<String, Object>) bgtInfo.get("monthlyEnfrc");
                                //CmMap<String, Object> asMap = (CmMap<String, Object>) monthlyEnfrc.get("배정예산");
                                CmMap<String, Object> asMap = (CmMap<String, Object>) monthlyEnfrc.get("as");
                                long asAmt = asMap==null?0:Long.parseLong(String.valueOf(asMap.get("total")));
                                //CmMap<String, Object> enMap = (CmMap<String, Object>) monthlyEnfrc.get("집행금액");
                                CmMap<String, Object> enMap = (CmMap<String, Object>) monthlyEnfrc.get("en");
                                long enAmt = enMap==null?0:Long.parseLong(String.valueOf(enMap.get("total")));

                                CmMap<String, Object> enpMap = (CmMap<String, Object>) monthlyEnfrc.get("enp");
                                long enpAmt = enpMap==null?0:Long.parseLong(String.valueOf(enpMap.get("total")));

                                CmMap<String, Object> cnivMap = (CmMap<String, Object>) monthlyEnfrc.get("cniv");
                                long cnivAmt = cnivMap==null?0:Long.parseLong(String.valueOf(cnivMap.get("total")));

                                CmMap<String,Object> cntrc = budgetService.getBgtCntrcInfo(bgtListSeq);
                                List<CmMap<String,Object>> cntrcList = (List<CmMap<String, Object>>) cntrc.get("cntrcList");
                                long completeCntrcAmt = budgetService.getCntrcEnfrctotalAmt(bsnss_year,bgt_no); //완료되지 않은 품의의 계약금액

                                CmMap<String, Object> approvalAmtMap = new CmMap<>();
                                approvalAmtMap.put("bgt_no", bgt_no); // 예산항목번호
                                approvalAmtMap.put("account_code", commonService.getCodeInfo(account_item, "account_item").get("cd_nm")); // 계정과목(계정항목)

                                //approvalAmtMap.put("execute_amt", enpAmt); // 당기 BY집행금액 (집행 계획 금액) 23./08.18 수정
                                approvalAmtMap.put("execute_amt", budgetService.getcntrcByTotalAmt(budgetService.getExecuteAmtCntrcSeq(bgt_no), ymList, yearList)); // 당기 BY집행금액  23.10.04 수정

                                approvalAmtMap.put("team_nm", bgtInfo.get("team_nm")); // 팀명
                                approvalAmtMap.put("user_nm", bgtInfo.get("mem_nm")); // 담당자명
                                approvalAmtMap.put("cost_center", bgtInfo.get("cost_center")); // 코스트센터
                                approvalAmtMap.put("cost_center_nm", bgtInfo.get("cost_center_nm")); // 코스트센터 명
                                approvalAmtMap.put("master_cd", bgtInfo.get("master_cd")); // 마스터코드
                                approvalAmtMap.put("master_cd_nm", bgtInfo.get("master_code_nm")); // 마스터코드 명
                                approvalAmtMap.put("budget_type", bgtInfo.get("cost_type")); // 유형(비용유형)
                                //역치환 추가
                                String budget_type_nm = StringEscapeUtils.unescapeHtml4(bgtInfo.get("cost_type_grp_nm") + " > " + bgtInfo.get("cost_type_nm"));
                                approvalAmtMap.put("budget_type_nm", budget_type_nm); // 유형(비용유형) 내용
                                approvalAmtMap.put("inv_wbs_cd", bgtInfo.get("inv_wbs_cd")); // 투자코드
                                approvalAmtMap.put("prchs_way", bgtInfo.get("prchs_way").equals("d")?"F1":"P2"); // 집행구분 = 구매방식(간접:i->P2/직접:d->F1)
                                approvalAmtMap.put("contract_item", bgtInfo.get("contract_item")); // 약정항목 - 투자코드 lvl1,2(신규투자 외 null로 들어감)

                                String approvalUrl = "";
                                if (account_item.equals("a")) { // 신규투자 분기 처리
                                    approvalUrl = APPROVAL_INV_URL+bgt_no;
                                    approvalAmtMap.put("approval_type", "100"); // 품의구분(100:투자집행,200:일반품의)
//                                    long totalAmt = Long.parseLong(String.valueOf(bgtInfo.get("total_amt")));
                                    approvalAmtMap.put("budget_amt", cntrcAmt); // 항목예산 - 총 계약금액(총 투자금액). 신규투자는 품의 여러개가 안되기 때문에 총 계약금액으로 가져감
                                    approvalAmtMap.put("contract_amt", 0); // 계약금액 - 0
                                    approvalAmtMap.put("inv_start_dt", bgtInfo.get("inv_start_dt").toString().substring(0,4)+bgtInfo.get("inv_start_dt").toString().substring(5,7)); // 예정월 - 투자시작일(YYYYMM)형태로 전달
                                    long diffAmt = cntrcAmt - cntrcByAmtTotal; // 총투자(계약)금액 -  당기BY집행금액(계획)(BY계약금액) - 23.04.17 수정
                                    approvalAmtMap.put("diff_amt", diffAmt);
                                } else {
                                    approvalUrl = APPROVAL_URL+bgt_no;
                                    approvalAmtMap.put("approval_type", "200"); // 품의구분(100:투자집행,200:일반품의)
                                    long budgetAmt = asAmt - completeCntrcAmt; // 배정예산 - 기계약금액  23.08.09 변경                             (구) 배정예산 - 집행금액
                                    approvalAmtMap.put("budget_amt", budgetAmt); // 항목예산 - 해당 BY 배정예산 -> 배정(잔여)예산: 배정예산-집행금액 23.03.06 품의 정보 변경
                                    approvalAmtMap.put("contract_amt", cntrcAmt); // 계약금액 - 총 계약금액x, 품의 작성 안된 계약금액의 합(계약건이 2건 이상일 경우 루프 돌려서 합산 된 금액 가져옴)
                                    long diffAmt = budgetAmt - cntrcByAmtTotal; // 과부족 : 배정(잔여)예산 - 당기BY집행금액(계획) 23.04.17 수정
                                    approvalAmtMap.put("diff_amt", diffAmt>0?"여유":diffAmt==0?"일치":"부족"); // 0보다 크면 여유, 0이면 일치, 0보다 작으면 부족
                                }
                                model.addAttribute("approvalUrl", approvalUrl);

                                // if_approval_amt insert & update
                                budgetService.updateApprovalAmtInfo(approvalAmtMap);
                            }

                        } else {
                            model.addAttribute("isApprovalBtnExpose", false);
                        }
                    } else {
                        model.addAttribute("isApprovalBtnExpose", false);
                    }
                }
